# -*- coding: utf-8 -*-
"""MercyBernard_Finals.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lmCeaGXIie91W3s0cYq4i3Bqdln6vQHR

Problem 1
"""

def remove_duplicates(array):
    unique_elements = set()  # Initialized an empty set to store unique elements
    result = []  # Initialized an empty list to store the final result

    for num in array:
        if num not in unique_elements:
            unique_elements.add(num)  # Add the unique number to the set
            result.append(num)  # Append the unique number to the result list

    return result


array = [1, 2, 3, 4, 4, 6, 6, 6]
print(remove_duplicates(array))

"""Problem 2"""

def postfix(expression):
    stack = []

    for token in expression:
        if token.isdigit():  # if the token is an operand (number)
            stack.append(int(token))
        else:  # if the token is an operator
            operand2 = stack.pop()  # pop the top two operands
            operand1 = stack.pop()
            if token == '+':
                result = operand1 + operand2
            elif token == '-':
                result = operand1 - operand2
            elif token == '*':
                result = operand1 * operand2
            elif token == '/':
                result = operand1 / operand2  # for division, use float division
            stack.append(result)  # push the result back onto the stack

    return stack[0]  # the final result will be the only element in the stack


input_expression = ["2", "1", "+", "4", "*"]
result = postfix(input_expression)
print("Postfix expression result:", result)

"""Problem 3"""

class Node:
    # A function to create a new node
    def __init__(self, key):
        self.data = key
        self.left = None
        self.right = None

def find_third_smallest(root):
    # function to perform in-order traversal
    def in_order_traverse(node):
        if node is None:
            return None
        # Traverse the left subtree
        left = in_order_traverse(node.left)
        if left is not None:
            return left
        # Visit the current node
        nonlocal count
        count += 1
        if count == 3:
            return node.data
        # Traverse the right subtree
        return in_order_traverse(node.right)

    count = 0
    return in_order_traverse(root)

# Creating the BST
root = Node(400)
root.left = Node(200)
root.right = Node(600)
root.left.left = Node(100)
root.left.right = Node(300)
root.right.left = Node(500)
root.right.right = Node(700)

# Find and print the third smallest element
third_smallest = find_third_smallest(root)
print("The third smallest element is:", third_smallest)